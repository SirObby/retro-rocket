<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="basic_8h" kind="file" language="C++">
    <compoundname>basic.h</compoundname>
    <includedby refid="kernel_8h" local="yes">kernel.h</includedby>
    <invincdepgraph>
      <node id="3">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>basic_tokenizer.h</label>
        <link refid="basic__tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>idt.h</label>
        <link refid="idt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>initialisation-functions.h</label>
        <link refid="initialisation-functions_8h"/>
      </node>
      <node id="20">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structfor__state" prot="public">for_state</innerclass>
    <innerclass refid="structub__var__int" prot="public">ub_var_int</innerclass>
    <innerclass refid="structub__var__double" prot="public">ub_var_double</innerclass>
    <innerclass refid="structub__var__string" prot="public">ub_var_string</innerclass>
    <innerclass refid="structub__param" prot="public">ub_param</innerclass>
    <innerclass refid="structub__proc__fn__def" prot="public">ub_proc_fn_def</innerclass>
    <innerclass refid="structub__var__int__array" prot="public">ub_var_int_array</innerclass>
    <innerclass refid="structub__var__string__array" prot="public">ub_var_string_array</innerclass>
    <innerclass refid="structub__var__double__array" prot="public">ub_var_double_array</innerclass>
    <innerclass refid="structub__var__generic__array" prot="public">ub_var_generic_array</innerclass>
    <innerclass refid="structub__line__ref" prot="public">ub_line_ref</innerclass>
    <innerclass refid="structcpuid__result__t" prot="public">cpuid_result_t</innerclass>
    <innerclass refid="structbasic__ctx" prot="public">basic_ctx</innerclass>
    <innerclass refid="structbasic__int__fn" prot="public">basic_int_fn</innerclass>
    <innerclass refid="structbasic__double__fn" prot="public">basic_double_fn</innerclass>
    <innerclass refid="structbasic__str__fn" prot="public">basic_str_fn</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="basic_8h_1a90bf9480b781825abfeb3f500d75531c" prot="public" static="no">
        <name>MAX_STRINGLEN</name>
        <initializer>1024</initializer>
        <briefdescription>
<para>Maximum length of a string variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="33" column="9" bodyfile="include/basic.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1a36568dfcd0f5dfaaeebb51d3c9aeb303" prot="public" static="no">
        <name>MAX_CALL_STACK_DEPTH</name>
        <initializer>255</initializer>
        <briefdescription>
<para>Maximum stack depth of GOSUB, PROC, FN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="38" column="9" bodyfile="include/basic.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1ad70e9ba1e1b2bbdb011ab487c2cb353d" prot="public" static="no">
        <name>MAX_LOOP_STACK_DEPTH</name>
        <initializer>255</initializer>
        <briefdescription>
<para>Maximum stack depth of FOR...NEXT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="43" column="9" bodyfile="include/basic.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1a1d28f33b55479f791aed387d6cc2dd75" prot="public" static="no">
        <name>EVAL_LINE</name>
        <initializer>999999998</initializer>
        <briefdescription>
<para>Specil line number where EVAL code is inserted dynamically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="179" column="9" bodyfile="include/basic.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1aed46a4c9764a1d0bb5501f0a2a4b4b51" prot="public" static="no">
        <name>EVAL_END_LINE</name>
        <initializer>999999999</initializer>
        <briefdescription>
<para>RETURN statement after EVAL code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="184" column="9" bodyfile="include/basic.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1a2a4dcaa2bd546946fb376aac316a19a0" prot="public" static="no">
        <name>AUX</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="186" column="9" bodyfile="include/basic.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1a6df1d22fb5f09eccc23b9f399670cfd7" prot="public" static="no">
        <name>STRINGIFY</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="basic_8h_1a2a4dcaa2bd546946fb376aac316a19a0" kindref="member">AUX</ref>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="187" column="9" bodyfile="include/basic.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1adc2a689c60d5146f9e0fe59050f5227b" prot="public" static="no">
        <name>PARAMS_START</name>
        <initializer>	[[maybe_unused]] int itemtype = <ref refid="basic_8h_1a6c0abde6f3447311fde5e92637f7d059a6cf123ea5240cfadbed2b15283cc98ea" kindref="member">BIP_INT</ref>; \
	[[maybe_unused]] int64_t intval = 0; \
	[[maybe_unused]] double doubleval = 0; \
	[[maybe_unused]] char* strval = NULL; \
	[[maybe_unused]] char oldval = 0; \
	[[maybe_unused]] char oldct = 0; \
	[[maybe_unused]] char* oldptr = 0; \
	[[maybe_unused]] char const* oldnextptr = NULL; \
	[[maybe_unused]] int gotone = 0; \
	[[maybe_unused]] int bracket_depth = 0; \
	[[maybe_unused]] char const* item_begin = ctx-&gt;ptr;</initializer>
        <briefdescription>
<para>Begin parsing function parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="439" column="9" bodyfile="include/basic.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1a2a18e363a2e01dbde04f5098ff9ec26b" prot="public" static="no">
        <name>PARAMS_GET_ITEM</name>
        <param><defname>type</defname></param>
        <briefdescription>
<para>Get a function parameter of type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of function parameter to get, fills one of the variables strval, doubleval or intval. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="457" column="9" bodyfile="include/basic.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1aede713e1611b7039a1c0b2d7fb076372" prot="public" static="no">
        <name>PARAMS_END</name>
        <param><defname>NAME</defname></param>
        <param><defname>returnval</defname></param>
        <initializer>	{ \
	if (*(ctx-&gt;ptr - 1) != &apos;)&apos;) { \
		<ref refid="basic__tokenizer_8h_1a6bb8f288ca3badb019539980d26250fc" kindref="member">tokenizer_error_print</ref>(ctx, &quot;Invalid number of parameters for &quot; NAME); \
		return returnval; \
	} \
}</initializer>
        <briefdescription>
<para>Ends fetching of function parameters, throwing an error if parameters still remain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="509" column="9" bodyfile="include/basic.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1a0739b5f58752ee50c4402e13ca2374ee" prot="public" static="no">
        <name>PARAMS_END_VOID</name>
        <param><defname>NAME</defname></param>
        <initializer>	{ \
	if (*(ctx-&gt;ptr - 1) != &apos;)&apos;) { \
		<ref refid="basic__tokenizer_8h_1a6bb8f288ca3badb019539980d26250fc" kindref="member">tokenizer_error_print</ref>(ctx, &quot;Invalid number of parameters for &quot; NAME); \
		return; \
	} \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="516" column="9" bodyfile="include/basic.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="basic_8h_1aef9ed76b78e983fde723b8a189712d81" prot="public" static="no">
        <name>accept_or_return</name>
        <param><defname>token</defname></param>
        <param><defname>ctx</defname></param>
        <initializer>	if (!<ref refid="basic_8h_1ad9ce2b562c925c1acc36a9d05208a478" kindref="member">accept</ref>(token, ctx)) { \
		return; \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="628" column="9" bodyfile="include/basic.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="basic_8h_1a65231902c1f22532519da8a1c01ba53e" prot="public" static="no" strong="no">
        <type></type>
        <name>ub_fn_type</name>
        <enumvalue id="basic_8h_1a65231902c1f22532519da8a1c01ba53eac71ea04245e41b2d6b8e533fcc74c659" prot="public">
          <name>FT_FN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a65231902c1f22532519da8a1c01ba53ead53af2599d572a45176f7076ae759bd6" prot="public">
          <name>FT_PROC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Function or procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="88" column="1" bodyfile="include/basic.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="basic_8h_1a2279cec37b8a81d5f18e78d7335b1966" prot="public" static="no" strong="no">
        <type></type>
        <name>ub_return_type</name>
        <enumvalue id="basic_8h_1a2279cec37b8a81d5f18e78d7335b1966a3b89ef745ac9a8ac746aff719e609758" prot="public">
          <name>RT_MAIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a2279cec37b8a81d5f18e78d7335b1966af6a45e9ab07167656b5d6509a8cc0a26" prot="public">
          <name>RT_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a2279cec37b8a81d5f18e78d7335b1966a0a653b41bba3d33c1017cbc8643c5268" prot="public">
          <name>RT_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a2279cec37b8a81d5f18e78d7335b1966a8748e4019711d7c401d6ed2b1568717d" prot="public">
          <name>RT_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a2279cec37b8a81d5f18e78d7335b1966af84eb2d6bedef8785a996abbec035e87" prot="public">
          <name>RT_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return type of FN, PROC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="96" column="1" bodyfile="include/basic.h" bodystart="96" bodyend="102"/>
      </memberdef>
      <memberdef kind="enum" id="basic_8h_1a6c0abde6f3447311fde5e92637f7d059" prot="public" static="no" strong="no">
        <type></type>
        <name>parameter_type_t</name>
        <enumvalue id="basic_8h_1a6c0abde6f3447311fde5e92637f7d059a9c51de3187ed2b68fc6ee811f7d9e9a4" prot="public">
          <name>BIP_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a6c0abde6f3447311fde5e92637f7d059a6cf123ea5240cfadbed2b15283cc98ea" prot="public">
          <name>BIP_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a6c0abde6f3447311fde5e92637f7d059a60a3bc81e662586f9588a11fdf5d1449" prot="public">
          <name>BIP_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="basic_8h_1a6c0abde6f3447311fde5e92637f7d059a23100c70927077e2746555cb5a3fac72" prot="public">
          <name>BIP_VARIABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="429" column="1" bodyfile="include/basic.h" bodystart="429" bodyend="434"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="basic_8h_1aae35741221b4c2f3ba048b8d86d91365" prot="public" static="no">
        <type>int64_t(*</type>
        <definition>typedef int64_t(* builtin_int_fn) (struct basic_ctx *ctx)</definition>
        <argsstring>)(struct basic_ctx *ctx)</argsstring>
        <name>builtin_int_fn</name>
        <briefdescription>
<para>Integer function signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="390" column="9" bodyfile="include/basic.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="basic_8h_1a2b294ef7282418e3db28f726ca390fa2" prot="public" static="no">
        <type>char *(*</type>
        <definition>typedef char *(* builtin_str_fn) (struct basic_ctx *ctx)</definition>
        <argsstring>)(struct basic_ctx *ctx)</argsstring>
        <name>builtin_str_fn</name>
        <briefdescription>
<para>String function signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="395" column="9" bodyfile="include/basic.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="basic_8h_1ab8104015746edc0f683c354654570dbd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* builtin_double_fn) (struct basic_ctx *ctx, double *res)</definition>
        <argsstring>)(struct basic_ctx *ctx, double *res)</argsstring>
        <name>builtin_double_fn</name>
        <briefdescription>
<para>Real (double) function signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="400" column="9" bodyfile="include/basic.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="basic_8h_1a9e892389dc272853d51b1bbbb49f4411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool valid_int_var</definition>
        <argsstring>(const char *name)</argsstring>
        <name>valid_int_var</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="526" column="6" declfile="include/basic.h" declline="526" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ad783607ef9114bb476aec066a2d5e5eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool valid_string_var</definition>
        <argsstring>(const char *name)</argsstring>
        <name>valid_string_var</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="527" column="6" declfile="include/basic.h" declline="527" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af12fcb4c5efc346a3a296505dce0a74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool valid_double_var</definition>
        <argsstring>(const char *name)</argsstring>
        <name>valid_double_var</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="528" column="6" declfile="include/basic.h" declline="528" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aa170566763878c35148ea9f2638e9b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_abs</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_abs</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="533" column="9" declfile="include/basic.h" declline="533" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1afa246b19a4a83a2f7aea99990bbe00a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_len</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_len</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="534" column="9" declfile="include/basic.h" declline="534" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a5f0edecae129eb20b8a5c14ce17d060a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_openin</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_openin</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="535" column="9" declfile="include/basic.h" declline="535" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a66cbfa93d4571f811e91c489fb6c4065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_openout</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_openout</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="536" column="9" declfile="include/basic.h" declline="536" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4ef74f88dc9c44ddd080bb0445ba4346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_openup</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_openup</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="537" column="9" declfile="include/basic.h" declline="537" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a24faeda0979f002fc502ba616616aaf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_eof</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_eof</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="538" column="9" declfile="include/basic.h" declline="538" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aca563edd05c3fb8634a5b5da6faf6957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_read</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_read</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="539" column="9" declfile="include/basic.h" declline="539" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aeb68d58dad0ebf48c1d8dd789f99ba64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_instr</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_instr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="540" column="9" declfile="include/basic.h" declline="540" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ad33e406d64edc962d069ffeecb518e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_asc</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_asc</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="541" column="9" declfile="include/basic.h" declline="541" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ab103cf02c19e401cd40a687e915427f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_getnamecount</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getnamecount</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="542" column="9" declfile="include/basic.h" declline="542" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a3a5ebc509dc778eb8156d399d7ff5275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_getsize</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getsize</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="543" column="9" declfile="include/basic.h" declline="543" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a5c98872e18d0340326d67d9118135325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_text_max_x</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_get_text_max_x</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="544" column="9" declfile="include/basic.h" declline="544" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1abf7fba182ee692bd56914e5c3f78672c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_text_max_y</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_get_text_max_y</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="545" column="9" declfile="include/basic.h" declline="545" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4d2dd7d8cdaa07e0fb506abaa0f33534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_text_cur_x</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_get_text_cur_x</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="546" column="9" declfile="include/basic.h" declline="546" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae0f318e0f96b6c6a72ec6b2e6294ddc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_text_cur_y</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_get_text_cur_y</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="547" column="9" declfile="include/basic.h" declline="547" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a9da3e6f13581eb7e1ef444fd2a676f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_getproccount</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getproccount</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="548" column="9" declfile="include/basic.h" declline="548" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1acb352170788fe4cafe1e06154907ed2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_getprocid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getprocid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="549" column="9" declfile="include/basic.h" declline="549" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a58a96c01d5976a1b3761d291acdfb858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_getprocparent</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getprocparent</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="550" column="9" declfile="include/basic.h" declline="550" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1affe153f3596c0f6980d005e45d65cdf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_getproccpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getproccpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="551" column="9" declfile="include/basic.h" declline="551" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a598143e2745c97b0a2e5cffc74dd3a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_rgb</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_rgb</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="552" column="9" declfile="include/basic.h" declline="552" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a9069dc76ed3a0f76c1ea2b7e6dc6f5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_free_mem</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_get_free_mem</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="553" column="9" declfile="include/basic.h" declline="553" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a91c85f5bd71d2e44a415436dc0097fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_used_mem</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_get_used_mem</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="554" column="9" declfile="include/basic.h" declline="554" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a0e97771baabdda5f01d4a5c9c0a5a792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_total_mem</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_get_total_mem</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="555" column="9" declfile="include/basic.h" declline="555" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aac6ae9f61fd4e475b5d2898fec1590f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_sockstatus</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_sockstatus</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="556" column="9" declfile="include/basic.h" declline="556" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a960906e3c99518691d7436fb9e89fc0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_ctrlkey</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_ctrlkey</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="557" column="9" declfile="include/basic.h" declline="557" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aa9dd52b60d188a55633447b3582b9b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_shiftkey</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_shiftkey</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="558" column="9" declfile="include/basic.h" declline="558" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4b999614892e962bb89fcf30c78feadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_altkey</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_altkey</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="559" column="9" declfile="include/basic.h" declline="559" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a6f6eeff9a451f2f806478dc60db581a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_capslock</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_capslock</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="560" column="9" declfile="include/basic.h" declline="560" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a8ee3bc48d89dce6438a4567453e16c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_random</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_random</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="561" column="9" declfile="include/basic.h" declline="561" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1afeefd46448bebfea73954e6b48448fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_legacy_getlastcpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_legacy_getlastcpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="562" column="9" declfile="include/basic.h" declline="562" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a988befdafcb2491d0f07b5f5ded58e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_legacy_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_legacy_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="563" column="9" declfile="include/basic.h" declline="563" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aca68b975022b959caf87e20f9342144e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="564" column="9" declfile="include/basic.h" declline="564" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a5733a8cbbf082da1ba38f54228780279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_netinfo</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_netinfo</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="569" column="6" declfile="include/basic.h" declline="569" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a768d4c9a2c8cef079ffb7ce89f14c296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_left</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_left</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="570" column="6" declfile="include/basic.h" declline="570" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af4a724052d66df1b14583770a372b369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_right</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_right</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="571" column="6" declfile="include/basic.h" declline="571" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a1b6802b4abe7cf2d21586a2ae34c9142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_mid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_mid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="572" column="6" declfile="include/basic.h" declline="572" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1add91b1f71debbcbdc5568e4b4a853124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_chr</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_chr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="573" column="6" declfile="include/basic.h" declline="573" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a8966029e7c67f620555eda876d1f3f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_readstring</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_readstring</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="574" column="6" declfile="include/basic.h" declline="574" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a605e7afdd98c250365cd8302c8d6c2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_getname</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getname</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="575" column="6" declfile="include/basic.h" declline="575" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a8c7b6f96530daab72f6c6291c07395a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_getprocname</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_getprocname</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="576" column="6" declfile="include/basic.h" declline="576" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1acc647b6955a00a39c3af9cd94ba44b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_dns</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_dns</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="577" column="6" declfile="include/basic.h" declline="577" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1affd1153268205dceeaa662a938d0fa7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_ramdisk_from_device</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_ramdisk_from_device</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="578" column="6" declfile="include/basic.h" declline="578" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae9065c04d3c15b07dd70ccd5c4e5e168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_ramdisk_from_size</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_ramdisk_from_size</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="579" column="6" declfile="include/basic.h" declline="579" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aa0afd7465756a54d5bed2636e5067c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_inkey</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_inkey</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="580" column="6" declfile="include/basic.h" declline="580" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a3a6adb48db31be0a4aeb1d93b9723013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_insocket</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_insocket</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="581" column="6" declfile="include/basic.h" declline="581" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a7bb53929cd531cc136f1371627ba657e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_upper</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_upper</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="582" column="6" declfile="include/basic.h" declline="582" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ac23b4db553c7a41e84727c3f41826a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_lower</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_lower</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="583" column="6" declfile="include/basic.h" declline="583" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a87bcf8c9bd538b10a704b3b794ff0255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_tokenize</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_tokenize</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="584" column="6" declfile="include/basic.h" declline="584" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a52d62e0a64914757a552a20624d82e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_csd</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_csd</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="585" column="6" declfile="include/basic.h" declline="585" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a044f4cf50ad0113ca27b52523c7effa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_cpugetbrand</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpugetbrand</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="586" column="6" declfile="include/basic.h" declline="586" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a43115754a3c53796dedc7c88b28a7d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_cpugetvendor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpugetvendor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="587" column="6" declfile="include/basic.h" declline="587" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a7e7c2dfe4c3f50628d35de4144a3ce56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_intoasc</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_intoasc</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="588" column="6" declfile="include/basic.h" declline="588" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae59e663583d153bad2df75f78302030c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void openin_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>openin_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="593" column="6" declfile="include/basic.h" declline="593" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a9046714d009f572d4b7813dff7f87cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void openup_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>openup_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="594" column="6" declfile="include/basic.h" declline="594" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ac5e9f2f653de2c238d2bf738b210d19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void openout_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>openout_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="595" column="6" declfile="include/basic.h" declline="595" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae8be40ae1c294bdbb7df5053faff1269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void read_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>read_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="596" column="6" declfile="include/basic.h" declline="596" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a5240841a9b6eea5a3803c79408d1ead3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void close_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>close_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="597" column="6" declfile="include/basic.h" declline="597" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aa8ddd1cb8f38f7ba7a946ac3ccfb20ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eof_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>eof_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="598" column="6" declfile="include/basic.h" declline="598" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a58014a7741d8ade41b9a360bf2855982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>delete_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="599" column="6" declfile="include/basic.h" declline="599" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a9a4238a28d16613ad1821c092c68b9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mkdir_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>mkdir_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="600" column="6" declfile="include/basic.h" declline="600" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a6cca92514a9ec98d46e6f4504eba6c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mount_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>mount_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="601" column="6" declfile="include/basic.h" declline="601" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a63999c7a13c1755d9974a556083e0551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rmdir_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>rmdir_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="602" column="6" declfile="include/basic.h" declline="602" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af57b4a8fdfd6fa8c2d840312244b51d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>write_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="603" column="6" declfile="include/basic.h" declline="603" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a130dcb9c4ac679f7776b7df221caefa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void chdir_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>chdir_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="604" column="6" declfile="include/basic.h" declline="604" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ac446b0ba3af7c03a847568d9b72adeed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_filetype</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_filetype</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="605" column="6" declfile="include/basic.h" declline="605" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a61f2356862072ed0b26c976b2e0733b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_sin</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_sin</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="610" column="6" declfile="include/basic.h" declline="610" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae583990f38cdcad325bb10a589ee00c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_cos</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_cos</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="611" column="6" declfile="include/basic.h" declline="611" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af7eedc0859b6885bde15748e74f976de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_tan</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_tan</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="612" column="6" declfile="include/basic.h" declline="612" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ac7132232b1580e3e51e1b6aea2d6b556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_pow</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_pow</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="613" column="6" declfile="include/basic.h" declline="613" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a6724a794d022c9884bf669821873b1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
        <definition>struct basic_ctx * basic_init</definition>
        <argsstring>(const char *program, console *cons, uint32_t pid, const char *file, char **error)</argsstring>
        <name>basic_init</name>
        <param>
          <type>const char *</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="structconsole" kindref="compound">console</ref> *</type>
          <declname>cons</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="618" column="17" declfile="include/basic.h" declline="618" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af018882ffc2e5fc5f888c4dea3ecf17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_destroy</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_destroy</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="619" column="6" declfile="include/basic.h" declline="619" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a56b04c55856eb16c14cb74068a770ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_run</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_run</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="620" column="6" declfile="include/basic.h" declline="620" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ab8aa7186bd4407c90642c4aef3288b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_finished</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_finished</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="621" column="6" declfile="include/basic.h" declline="621" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aa2c73bceaa056ea01125ef6fdfce922e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jump_linenum</definition>
        <argsstring>(int64_t linenum, struct basic_ctx *ctx)</argsstring>
        <name>jump_linenum</name>
        <param>
          <type>int64_t</type>
          <declname>linenum</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="622" column="6" declfile="include/basic.h" declline="622" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a2b822df8abb6e9bec6bd0033f1a60e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void line_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>line_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="623" column="6" declfile="include/basic.h" declline="623" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4af325fda4cf09dde88a6f61d3f11b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="624" column="6" declfile="include/basic.h" declline="624" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ad9ce2b562c925c1acc36a9d05208a478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool accept</definition>
        <argsstring>(int token, struct basic_ctx *ctx)</argsstring>
        <name>accept</name>
        <param>
          <type>int</type>
          <declname>token</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="625" column="6" declfile="include/basic.h" declline="625" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a0a686d90dc8901814770b867d85cd2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_parse_fn</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_parse_fn</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="626" column="6" declfile="include/basic.h" declline="626" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aec48249fe094a7f73bc1c2bce802f6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_int_variable</definition>
        <argsstring>(const char *varname, struct basic_ctx *ctx)</argsstring>
        <name>basic_get_int_variable</name>
        <param>
          <type>const char *</type>
          <declname>varname</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="636" column="9" declfile="include/basic.h" declline="636" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a65166d979ee0726821cec844a6a05856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_get_double_variable</definition>
        <argsstring>(const char *var, struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_get_double_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="637" column="6" declfile="include/basic.h" declline="637" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a03c742f9d706f4b8f919d3e6f8ee6be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * basic_get_string_variable</definition>
        <argsstring>(const char *var, struct basic_ctx *ctx)</argsstring>
        <name>basic_get_string_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="638" column="12" declfile="include/basic.h" declline="638" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1aa09a0d5b3cb727af7675a2b8ac2ba74a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_string_variable</definition>
        <argsstring>(const char *var, const char *value, struct basic_ctx *ctx, bool local, bool global)</argsstring>
        <name>basic_set_string_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="639" column="6" declfile="include/basic.h" declline="639" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af5c66412e1df2c2e20bf266bb4bbf72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_double_variable</definition>
        <argsstring>(const char *var, const double value, struct basic_ctx *ctx, bool local, bool global)</argsstring>
        <name>basic_set_double_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="640" column="6" declfile="include/basic.h" declline="640" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a3d66422a4fcb7d011bd9bdd6ce68c36b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_int_variable</definition>
        <argsstring>(const char *var, int64_t value, struct basic_ctx *ctx, bool local, bool global)</argsstring>
        <name>basic_set_int_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="641" column="6" declfile="include/basic.h" declline="641" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a46cef0a6e745ef1947f3666ef18e2c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="basic_8h_1a2279cec37b8a81d5f18e78d7335b1966" kindref="member">ub_return_type</ref></type>
        <definition>ub_return_type basic_get_numeric_variable</definition>
        <argsstring>(const char *var, struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_get_numeric_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="642" column="16" declfile="include/basic.h" declline="642" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4dc306b4f5e91e66b4871cd792f321bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_numeric_int_variable</definition>
        <argsstring>(const char *var, struct basic_ctx *ctx)</argsstring>
        <name>basic_get_numeric_int_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="643" column="9" declfile="include/basic.h" declline="643" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a2c7e8b624897fda4d3e346c294d8756e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_int_array_variable</definition>
        <argsstring>(const char *var, int64_t index, int64_t value, struct basic_ctx *ctx)</argsstring>
        <name>basic_set_int_array_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="648" column="6" declfile="include/basic.h" declline="648" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ad2084194c3d68a69b9b61744e440906e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_string_array_variable</definition>
        <argsstring>(const char *var, int64_t index, const char *value, struct basic_ctx *ctx)</argsstring>
        <name>basic_set_string_array_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="649" column="6" declfile="include/basic.h" declline="649" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4a6c9643edeed2939eeaf0c24e4280a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_double_array_variable</definition>
        <argsstring>(const char *var, int64_t index, double value, struct basic_ctx *ctx)</argsstring>
        <name>basic_set_double_array_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="650" column="6" declfile="include/basic.h" declline="650" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1abccdcd1e3045d4f5d0e505cd313bf462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_get_double_array_variable</definition>
        <argsstring>(const char *var, int64_t index, struct basic_ctx *ctx, double *ret)</argsstring>
        <name>basic_get_double_array_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="651" column="6" declfile="include/basic.h" declline="651" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a7863b8c90f83b4180233241788b14767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_get_int_array_variable</definition>
        <argsstring>(const char *var, int64_t index, struct basic_ctx *ctx)</argsstring>
        <name>basic_get_int_array_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="652" column="9" declfile="include/basic.h" declline="652" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ade733b26122731cddd442c8b63764c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * basic_get_string_array_variable</definition>
        <argsstring>(const char *var, int64_t index, struct basic_ctx *ctx)</argsstring>
        <name>basic_get_string_array_variable</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="653" column="12" declfile="include/basic.h" declline="653" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a25934e25b4f5b0f4b5895a4530450c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_dim_string_array</definition>
        <argsstring>(const char *var, int64_t size, struct basic_ctx *ctx)</argsstring>
        <name>basic_dim_string_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="654" column="6" declfile="include/basic.h" declline="654" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae72e525f34416ebcc88b46a501253ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_dim_int_array</definition>
        <argsstring>(const char *var, int64_t size, struct basic_ctx *ctx)</argsstring>
        <name>basic_dim_int_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="655" column="6" declfile="include/basic.h" declline="655" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a67da3dae6bdcde53d6f7d8a1d8b2e77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_dim_double_array</definition>
        <argsstring>(const char *var, int64_t size, struct basic_ctx *ctx)</argsstring>
        <name>basic_dim_double_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="656" column="6" declfile="include/basic.h" declline="656" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4c7df6167cbfa1fb880e7e0470dbe8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_redim_string_array</definition>
        <argsstring>(const char *var, int64_t size, struct basic_ctx *ctx)</argsstring>
        <name>basic_redim_string_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="657" column="6" declfile="include/basic.h" declline="657" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af5b9b9fa3784b8937f62820378805ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_redim_int_array</definition>
        <argsstring>(const char *var, int64_t size, struct basic_ctx *ctx)</argsstring>
        <name>basic_redim_int_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="658" column="6" declfile="include/basic.h" declline="658" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a9d9998859d4e3cc07e2c116ab107c94c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_redim_double_array</definition>
        <argsstring>(const char *var, int64_t size, struct basic_ctx *ctx)</argsstring>
        <name>basic_redim_double_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="659" column="6" declfile="include/basic.h" declline="659" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a76d8e16ca87f547f2794e39069cd9722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool varname_is_int_array_access</definition>
        <argsstring>(struct basic_ctx *ctx, const char *varname)</argsstring>
        <name>varname_is_int_array_access</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>varname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="660" column="6" declfile="include/basic.h" declline="660" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af49472afededf4675531cdcba461948a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool varname_is_string_array_access</definition>
        <argsstring>(struct basic_ctx *ctx, const char *varname)</argsstring>
        <name>varname_is_string_array_access</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>varname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="661" column="6" declfile="include/basic.h" declline="661" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ad2d19349908ed2a14140d33bf51629a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool varname_is_double_array_access</definition>
        <argsstring>(struct basic_ctx *ctx, const char *varname)</argsstring>
        <name>varname_is_double_array_access</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>varname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="662" column="6" declfile="include/basic.h" declline="662" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a555a2d99ddd912aed6c23c1b7f181fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arr_variable_index</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>arr_variable_index</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="663" column="9" declfile="include/basic.h" declline="663" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a80814c864756da9fd6a4d206c4053b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_int_array</definition>
        <argsstring>(const char *var, int64_t value, struct basic_ctx *ctx)</argsstring>
        <name>basic_set_int_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="664" column="6" declfile="include/basic.h" declline="664" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a6249a30e03091e0097be165fd447ab25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_string_array</definition>
        <argsstring>(const char *var, const char *value, struct basic_ctx *ctx)</argsstring>
        <name>basic_set_string_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="665" column="6" declfile="include/basic.h" declline="665" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a3bb1b507bc152015d00a6e239dcc39ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_set_double_array</definition>
        <argsstring>(const char *var, double value, struct basic_ctx *ctx)</argsstring>
        <name>basic_set_double_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="666" column="6" declfile="include/basic.h" declline="666" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a10db67c91f83eac882df05463f29edf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dim_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>dim_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="667" column="6" declfile="include/basic.h" declline="667" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a0f66eb0bc390f79924cdea6358f18243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redim_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>redim_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="668" column="6" declfile="include/basic.h" declline="668" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae5c7d95dad0bc7d5fd85db9c9fec3361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pop_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>pop_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="669" column="6" declfile="include/basic.h" declline="669" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1abecee5383a8df1f74a1cc79af744020d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>push_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="670" column="6" declfile="include/basic.h" declline="670" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a7c3ee270a20b9715231edcfd1b8b2c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arr_expr_set_index</definition>
        <argsstring>(struct basic_ctx *ctx, const char *varname)</argsstring>
        <name>arr_expr_set_index</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>varname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="671" column="9" declfile="include/basic.h" declline="671" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a97046e187654a294ce854d7f441f0f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_pop_string_array</definition>
        <argsstring>(const char *var, int64_t pop_pos, struct basic_ctx *ctx)</argsstring>
        <name>basic_pop_string_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>pop_pos</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="672" column="6" declfile="include/basic.h" declline="672" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a3e5e6d11d8aa6f4de388c84a297592db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_pop_int_array</definition>
        <argsstring>(const char *var, int64_t pop_pos, struct basic_ctx *ctx)</argsstring>
        <name>basic_pop_int_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>pop_pos</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="673" column="6" declfile="include/basic.h" declline="673" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1abeaa98786890da848853eb1ca294dad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_pop_double_array</definition>
        <argsstring>(const char *var, int64_t pop_pos, struct basic_ctx *ctx)</argsstring>
        <name>basic_pop_double_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>pop_pos</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="674" column="6" declfile="include/basic.h" declline="674" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a70f54b5b63111d3d14476da79357f3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_push_string_array</definition>
        <argsstring>(const char *var, int64_t push_pos, struct basic_ctx *ctx)</argsstring>
        <name>basic_push_string_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>push_pos</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="675" column="6" declfile="include/basic.h" declline="675" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a3b3a087b821261b5f70f95c435f94553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_push_int_array</definition>
        <argsstring>(const char *var, int64_t push_pos, struct basic_ctx *ctx)</argsstring>
        <name>basic_push_int_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>push_pos</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="676" column="6" declfile="include/basic.h" declline="676" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a0413802aed30e77312d145c785028b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_push_double_array</definition>
        <argsstring>(const char *var, int64_t push_pos, struct basic_ctx *ctx)</argsstring>
        <name>basic_push_double_array</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>push_pos</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="677" column="6" declfile="include/basic.h" declline="677" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1acac5d55e8d22685e55efef4b6737f5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t expr</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>expr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="682" column="9" declfile="include/basic.h" declline="682" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a82b38ae80b08b12294c9bfc7f74ef707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t relation</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>relation</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="683" column="9" declfile="include/basic.h" declline="683" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a74736577f6e6c03730accb1bf6609a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void double_expr</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>double_expr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="688" column="6" declfile="include/basic.h" declline="688" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a8ee284d90bf47b74190b99f3ca1931f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void double_relation</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>double_relation</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="689" column="6" declfile="include/basic.h" declline="689" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a0dcee901e81d6ca3a8e584f2d04a3fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * str_expr</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>str_expr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="694" column="12" declfile="include/basic.h" declline="694" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4727b05ac445c783f91c761aff40ffda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t str_relation</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>str_relation</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="695" column="9" declfile="include/basic.h" declline="695" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a0655a7535f7325ecdf8369c1df0eff45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * printable_syntax</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>printable_syntax</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="700" column="6" declfile="include/basic.h" declline="700" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ad4bc068a37938522b9addf519de12756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void library_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>library_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="701" column="6" declfile="include/basic.h" declline="701" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1af0412313c94342985b8a8c2cb7e8808f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_free_defs</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_free_defs</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="702" column="6" declfile="include/basic.h" declline="702" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae64f409fce646c35026a2f3c376601fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void begin_comma_list</definition>
        <argsstring>(struct ub_proc_fn_def *def, struct basic_ctx *ctx)</argsstring>
        <name>begin_comma_list</name>
        <param>
          <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="703" column="6" declfile="include/basic.h" declline="703" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a98495ca274489e72135a13df2a16caca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t extract_comma_list</definition>
        <argsstring>(struct ub_proc_fn_def *def, struct basic_ctx *ctx)</argsstring>
        <name>extract_comma_list</name>
        <param>
          <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="704" column="9" declfile="include/basic.h" declline="704" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a74a2cb553e82e778dfd7a2c3cd39fa37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool conditional</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>conditional</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="705" column="6" declfile="include/basic.h" declline="705" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a02cb6072b5475bea18fc8d39f54fa1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_int_variable_exists</definition>
        <argsstring>(const char *var, struct basic_ctx *ctx)</argsstring>
        <name>basic_int_variable_exists</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="706" column="6" declfile="include/basic.h" declline="706" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ae9c342e06df1aa6a33395f385c46138b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_string_variable_exists</definition>
        <argsstring>(const char *var, struct basic_ctx *ctx)</argsstring>
        <name>basic_string_variable_exists</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="707" column="6" declfile="include/basic.h" declline="707" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a4f4d220db2cd25e991803885926174ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_double_variable_exists</definition>
        <argsstring>(const char *var, struct basic_ctx *ctx)</argsstring>
        <name>basic_double_variable_exists</name>
        <param>
          <type>const char *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="708" column="6" declfile="include/basic.h" declline="708" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1acec189e89abfedbc1303781f0f708e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_val</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_val</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="709" column="9" declfile="include/basic.h" declline="709" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1ab096fbf99da97d870adaaace45f99f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_hexval</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_hexval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="710" column="9" declfile="include/basic.h" declline="710" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a325120ffce1738ef4a82e8d754d526d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_octval</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_octval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="711" column="9" declfile="include/basic.h" declline="711" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a8d25e29c6b8d86342bf578d6e6386f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_realval</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_realval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="712" column="6" declfile="include/basic.h" declline="712" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a417b4fa38e97281fb2d80e5cdc35ae55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_str</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_str</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="713" column="6" declfile="include/basic.h" declline="713" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic_8h_1a7ed9d573b2e1b1f86f048e576b3242ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * basic_bool</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bool</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic.h" line="714" column="6" declfile="include/basic.h" declline="714" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Retro Rocket BASIC interpreter. </para>
    </briefdescription>
    <detaileddescription>
<para>Retro Rocket OS Project (C) Craig Edwards 2012. <simplesect kind="note"><para>loosely based on uBASIC (Copyright (c) 2006, Adam Dunkels, All rights reserved).</para>
</simplesect>
uBASIC is far more limited than the dialect implemented here. It only allowed variables of one letter in length, and only integer variables, no PROC, FN, or additional functions, no floating point or string ops, no INPUT, just plain mathematical expressions, no ability to isolate execution into a context, and was (and in parts still is) quite badly optimised. It was what it was, a good starting off point.</para>
<para>THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS `<lsquo/>AS IS<rsquo/>&apos; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </para>
    </detaileddescription>
    <location file="include/basic.h"/>
  </compounddef>
</doxygen>
